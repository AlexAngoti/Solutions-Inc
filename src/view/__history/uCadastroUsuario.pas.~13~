unit uCadastroUsuario;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uCadastroPadrao, Datasnap.Provider,
  Data.DB, Datasnap.DBClient, Vcl.Buttons, Vcl.StdCtrls, Vcl.ExtCtrls, Vcl.Mask,
  Vcl.DBCtrls, SWHDBEdit;

type
  TfrmCadastroPadrao1 = class(TfrmCadastroPadrao)
    pnlTopCentral: TPanel;
    edtNome: TSWHDBEdit;
    Label2: TLabel;
    lblSenha: TLabel;
    edtSenha: TSWHDBEdit;
    procedure edtSenhaExit(Sender: TObject);
  private
    function ValidaSenha(const senha: string): Boolean;
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmCadastroPadrao1: TfrmCadastroPadrao1;

implementation

{$R *.dfm}

procedure TfrmCadastroPadrao1.edtSenhaExit(Sender: TObject);
begin
  if edtSenha.Text <> EmptyStr then
  begin

  end;
end;

function TfrmCadastroPadrao1.ValidaSenha(const senha: string): Boolean;
var
  i: Integer;
  temMaiuscula, temSimbolo: Boolean;
begin
  if Length(senha) < 8 then
  begin
    ShowMessage('A senha deve ter no mínimo 8 caracteres.');
    Result := False;
    Exit;
  end;

  temMaiuscula := False;
  temSimbolo   := False;
  for i := 1 to Length(senha) do
  begin
    if CharInSet(senha[i], ['A'..'Z']) then
      temMaiuscula := True
    else if CharInSet(senha[i], ['!', '@', '#', '$', '%', '&', '*', '_', '+', '-', '=']) then
      temSimbolo := True;
  end;

  if not temMaiuscula then
    ShowMessage('A senha deve conter pelo menos uma letra maiúscula.');

  if not temSimbolo then
    ShowMessage('A senha deve conter pelo menos um símbolo (!@#$%&*_+-=).');

  Result := temMaiuscula and temSimbolo;
end;

end.
